
@page "/totals"
@inject ResultService ResultService
@inject RosterService Roster
@inject ScoringService Scoring

@if (TotalsVisibility?.ShowTotals ?? true)
{
    <div class="card mb-4">
        <div class="card-header">Team Totals</div>
        <div class="table-responsive">
            <table class="table table-bordered mb-0">
                <thead><tr><th>Team</th><th>Points</th></tr></thead>
                <tbody>
                    @foreach (var row in TeamTotals.OrderByDescending(t => t.Value))
                    {
                        <tr><td>@row.Key</td><td>@row.Value</td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card">
        <div class="card-header">Ageâ€‘Group Totals</div>
        <div class="card-body p-0">
            @foreach (var grp in AgeGroups)
            {
                <div class="p-2 border-bottom fw-semibold bg-light">@grp</div>
                <div class="table-responsive">
                    <table class="table table-sm table-striped mb-0">
                        <thead><tr><th>Team</th><th>Points</th></tr></thead>
                        <tbody>
                            @foreach (var row in AgeGroupTotals[grp].OrderByDescending(t => t.Value))
                            {
                                <tr><td>@row.Key</td><td>@row.Value</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-info">Totals hidden.</div>
}

@implements IDisposable
@code {
    [CascadingParameter] public TotalsVisibilityService? TotalsVisibility { get; set; }
    private string[] AgeGroups = { "6 & U","7-8","9-10","11-12","13-14","15-18"};
    private Dictionary<string,int> TeamTotals = new();
    private Dictionary<string,Dictionary<string,int>> AgeGroupTotals = new();

    private void VisibilityChanged() => InvokeAsync(StateHasChanged);

    protected override void OnInitialized()
    {
        Recalc();
        ResultService.Results.CollectionChanged += (_,__) => { Recalc(); InvokeAsync(StateHasChanged); };
        if (TotalsVisibility != null)
            TotalsVisibility.OnChange += VisibilityChanged;
    }

    public void Dispose()
    {
        if (TotalsVisibility != null)
            TotalsVisibility.OnChange -= VisibilityChanged;
    }

    private void Recalc()
    {
        TeamTotals = new();
        AgeGroupTotals = AgeGroups.ToDictionary(a=>a, _=> new Dictionary<string,int>());
        foreach(var r in ResultService.Results)
        {
            var pts = Scoring.PointsForPlace(r.Place, r.IsRelay);
            // team
            if(!TeamTotals.ContainsKey(r.TeamAbbr)) TeamTotals[r.TeamAbbr]=0;
            TeamTotals[r.TeamAbbr]+=pts;

            // individual scoring (no relay) to swimmer age group
            if(!r.IsRelay)
            {
                var swimmer = Roster.FindByKey(r.SwimmerKey);
                if(swimmer is not null)
                {
                    var ag = swimmer.AgeGroup;
                    if(!AgeGroupTotals[ag].ContainsKey(r.TeamAbbr)) AgeGroupTotals[ag][r.TeamAbbr]=0;
                    AgeGroupTotals[ag][r.TeamAbbr]+=pts;
                }
            }
        }
    }
}
